--- a/cmd/cmd_show_logo.c	2024-05-30 14:25:18.997254122 +0800
+++ b/cmd/cmd_show_logo.c	2024-05-30 14:27:18.599590536 +0800
@@ -0,0 +1,358 @@
+/*
+ * SPDX-FileCopyrightText: 2024 M5Stack Technology CO LTD
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#include <asm/gpio.h>
+#include <bmp_layout.h>
+#include <command.h>
+#include <common.h>
+#include <dm.h>
+#include <env.h>
+#include <errno.h>
+#include <gzip.h>
+#include <i2c.h>
+#include <linux/delay.h>
+#include <malloc.h>
+#include <mapmem.h>
+#include <spi.h>
+#include <stdlib.h>
+#include <time.h>
+
+#define CHECK_RET(ret)                                                       \
+    do {                                                                     \
+        if ((ret) == 0) {                                                    \
+            printf("Function: %s, Line: %d, success\n", __func__, __LINE__); \
+        } else {                                                             \
+            printf("Function: %s, Line: %d, ret: %d\n", __func__, __LINE__,  \
+                   (ret));                                                   \
+        }                                                                    \
+    } while (0)
+
+struct logo_bus_t {
+    int chip_id;
+    int spi_bus_num;
+    int spi_cs;
+    int spi_max_hz;
+    int spi_dc_enable;
+    char spi_name[30];
+    struct udevice *i2c_dev;
+    struct udevice *spi_dev;
+    struct spi_slave *spi_slave;
+    unsigned int gpio_num;
+    int flage;
+};
+static struct logo_bus_t logo_bus;
+static void Lcd_WriteIndex(uint8_t data) {
+    if (logo_bus.spi_dc_enable) {
+        gpio_direction_output(logo_bus.gpio_num, 0);
+        logo_bus.spi_dc_enable = 0;
+    }
+    spi_xfer(logo_bus.spi_slave, 8, &data, NULL, SPI_XFER_BEGIN | SPI_XFER_END);
+}
+static void LCD_WriteData(uint8_t data) {
+    if (!logo_bus.spi_dc_enable) {
+        gpio_direction_output(logo_bus.gpio_num, 1);
+        logo_bus.spi_dc_enable = 1;
+    }
+    spi_xfer(logo_bus.spi_slave, 8, &data, NULL, SPI_XFER_BEGIN | SPI_XFER_END);
+}
+
+static int logo_apply_bus(void) {
+    int ret;
+
+    logo_bus.chip_id       = 0x34;
+    logo_bus.spi_bus_num   = 1;
+    logo_bus.spi_cs        = 0;
+    logo_bus.spi_max_hz    = 50000000;
+    logo_bus.spi_dc_enable = 0;
+    snprintf(logo_bus.spi_name, sizeof(logo_bus.spi_name), "generic_%d:%d",
+             logo_bus.spi_bus_num, logo_bus.spi_cs);
+    // apply i2c
+    ret = i2c_get_chip_for_busnum(0, logo_bus.chip_id, 1, &logo_bus.i2c_dev);
+
+    ret = i2c_set_chip_offset_len(logo_bus.i2c_dev, 1);
+
+    // apply spi
+    ret = spi_get_bus_and_cs(logo_bus.spi_bus_num, logo_bus.spi_cs,
+                             logo_bus.spi_max_hz, SPI_MODE_0, "spi_generic_drv",
+                             logo_bus.spi_name, &logo_bus.spi_dev,
+                             &logo_bus.spi_slave);
+
+    // apply gpio
+    ret = gpio_lookup_name("GPIOH4", NULL, NULL, &logo_bus.gpio_num);
+    ret = gpio_request(logo_bus.gpio_num, "cmd_gpio");
+
+    logo_bus.flage = 0;
+    return logo_bus.flage;
+}
+static int logo_release_bus(void) {
+    // spi_release_bus(logo_bus.spi_slave);
+    // spi_free_slave(logo_bus.spi_slave);
+    // gpio_free(logo_bus.gpio_num);
+
+    logo_bus.flage = -1;
+    return logo_bus.flage;
+}
+
+const uint8_t logo_rgb565_bin_gz[] = {
+0x1f, 0x8b, 0x08, 0x00, 0x99, 0xb4, 0xf8, 0x66, 0x02, 0xff, 0xed, 0x9d, 0x3f, 0x68, 0x14, 0x4f, 0x14, 0x80, 0x5b, 0x6b, 0xb1, 0xfb, 0x25, 0x45, 0x8a, 0xd4, 0x2a, 0x36, 0xd1, 0x98, 0xd2, 0xc6, 0x60, 0x25, 0x06, 0x8c, 0x26, 0x95, 0x95, 0x22, 0x04, 0xd4, 0xc2, 0x68, 0x52, 0x89, 0x5d, 0x1a, 0x11, 0x83, 0x90, 0xa4, 0xd3, 0x4e, 0x6d, 0x24, 0x45, 0xc0, 0x58, 0xa6, 0xbb, 0x90, 0x46, 0x85, 0x08, 0x57, 0x5e, 0x91, 0x5a, 0x0e, 0x04, 0xb9, 0x1f, 0xcb, 0x21, 0x67, 0x6e, 0xe6, 0x76, 0xe7, 0xcd, 0xbc, 0xd9, 0xdd, 0x9b, 0xfd, 0xbe, 0x69, 0x2f, 0x99, 0xbd, 0x9d, 0xef, 0x66, 0xe7, 0xbd, 0xf9, 0xb3, 0xbd, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1d, 0x68, 0x4f, 0x6c, 0x6f, 0xca, 0x4a, 0x7b, 0xa2, 0xda, 0x2b, 0x3e, 0x98, 0xdc, 0xd9, 0x72, 0x29, 0xbb, 0x7f, 0x0e, 0x97, 0x69, 0xdf, 0x3a, 0x9b, 0x37, 0xbb, 0x72, 0xe9, 0xbc, 0x5f, 0x99, 0x5d, 0xa9, 0xe4, 0x8a, 0xd7, 0xe7, 0x66, 0xa4, 0xe5, 0xda, 0x53, 0x5a, 0xba, 0x9e, 0xf8, 0xdb, 0x97, 0x95, 0xed, 0xcd, 0xf2, 0xed, 0xbb, 0xf6, 0x54, 0xee, 0xdf, 0xdc, 0xcc, 0xc1, 0x24, 0x6d, 0x5d, 0x3f, 0x9e, 0xff, 0x0a, 0xb1, 0xaf, 0x5f, 0x5a, 0xc7, 0x65, 0x5e, 0xb1, 0x8f, 0x7b, 0xfd, 0x42, 0x6b, 0xd7, 0x8f, 0x70, 0xfb, 0xfa, 0xa5, 0xbb, 0x5f, 0xd6, 0xa8, 0xcf, 0xdf, 0xbf, 0x8f, 0x3f, 0x69, 0xef, 0x54, 0xfd, 0x2b, 0x6b, 0x24, 0xb8, 0xb3, 0xe5, 0xef, 0xdf, 0xce, 0x16, 0xed, 0x9d, 0xaa, 0x7f, 0x59, 0xb9, 0x7b, 0xb6, 0xde, 0xfe, 0x3d, 0xfc, 0x4d, 0x7b, 0xa7, 0xec, 0xdf, 0xa5, 0xf3, 0xfb, 0xab, 0xf8, 0x07, 0xd5, 0xf9, 0x97, 0x95, 0xce, 0x1a, 0xfe, 0x41, 0x75, 0xfe, 0x65, 0x05, 0xff, 0xa0, 0x4a, 0xff, 0xe2, 0x8d, 0x04, 0xf1, 0x0f, 0xff, 0xdc, 0xca, 0xc6, 0x42, 0xdd, 0xf2, 0x7f, 0xf8, 0xd7, 0x24, 0xff, 0x62, 0x8d, 0x04, 0xf1, 0x0f, 0xff, 0xaa, 0xcc, 0x4b, 0x77, 0xdb, 0x4b, 0x7b, 0xf8, 0x87, 0x7f, 0x55, 0x66, 0xa6, 0x0f, 0x97, 0xd7, 0xff, 0xc3, 0xbf, 0xa6, 0xf8, 0xb7, 0xb1, 0xd0, 0x3a, 0x1e, 0x94, 0xed, 0xcd, 0xf9, 0x23, 0x99, 0x81, 0xcf, 0x7f, 0xc5, 0xb8, 0xf2, 0xce, 0xd7, 0xc3, 0xe5, 0x41, 0xb9, 0xf5, 0x16, 0xff, 0x52, 0xf4, 0xcf, 0x1e, 0xc9, 0x76, 0xf7, 0xef, 0xdd, 0x94, 0xf5, 0x81, 0xbb, 0x97, 0x63, 0x7f, 0x93, 0xe2, 0xe7, 0x32, 0xfe, 0x8d, 0x9b, 0x7f, 0xb3, 0x2b, 0xa3, 0xc7, 0x6f, 0xf5, 0x5b, 0xa1, 0xd0, 0x6d, 0xe3, 0x5f, 0x5a, 0xfe, 0x15, 0xb4, 0xf7, 0x7e, 0xdd, 0xd6, 0x28, 0xe4, 0x8f, 0x0a, 0xf1, 0x2f, 0x2d, 0xff, 0x7a, 0xbd, 0xdd, 0xcb, 0x75, 0x18, 0x09, 0x0e, 0xc8, 0x5f, 0x9d, 0x85, 0x7f, 0xa9, 0xf9, 0x97, 0xb1, 0xbd, 0x59, 0xa7, 0x91, 0x20, 0xfe, 0x35, 0xcd, 0xbf, 0xec, 0x39, 0xfc, 0xf8, 0xb3, 0x6c, 0x76, 0x2e, 0xde, 0xde, 0x25, 0xfc, 0x6b, 0x9e, 0x7f, 0x3e, 0xd1, 0x08, 0xfe, 0x81, 0xa6, 0x7f, 0xbd, 0xde, 0xc6, 0x82, 0xcc, 0xc0, 0xf9, 0x23, 0xfc, 0x03, 0xcd, 0x5e, 0x6a, 0x7f, 0x55, 0x66, 0xe0, 0xbb, 0x1f, 0xf8, 0x87, 0x7f, 0xba, 0x4f, 0x49, 0x59, 0x34, 0x32, 0x7f, 0xa4, 0x3d, 0x12, 0xc4, 0xbf, 0x66, 0xfb, 0x27, 0x8f, 0x46, 0x1e, 0x7f, 0xd6, 0xcc, 0x4c, 0xe3, 0x5f, 0xd3, 0xfd, 0xcb, 0x90, 0xed, 0x69, 0xd7, 0x1c, 0x09, 0xe2, 0x1f, 0xfe, 0xf9, 0x44, 0x23, 0x5a, 0x7d, 0x20, 0xfe, 0xe1, 0x9f, 0x4f, 0x34, 0xa2, 0x35, 0x12, 0xc4, 0x3f, 0xfc, 0x1b, 0xf0, 0xee, 0x87, 0xc4, 0xc1, 0x7b, 0x37, 0xc3, 0x7b, 0x41, 0xfc, 0xc3, 0xbf, 0xd3, 0xd1, 0x88, 0xec, 0x84, 0x99, 0xd0, 0xf3, 0x8c, 0xf0, 0x0f, 0xff, 0xc2, 0xa2, 0x91, 0x7b, 0x37, 0xf1, 0x0f, 0xff, 0x74, 0x67, 0xc9, 0x64, 0x59, 0xc1, 0x90, 0x7a, 0xf1, 0x0f, 0xff, 0x6c, 0xb4, 0x8e, 0xcb, 0x19, 0x09, 0xe2, 0x1f, 0xfe, 0xe9, 0x44, 0x23, 0x7e, 0x23, 0x41, 0xfc, 0xc3, 0xbf, 0xd1, 0xdc, 0x3d, 0x1b, 0x7b, 0x24, 0x88, 0x7f, 0xf8, 0x97, 0xc7, 0xfe, 0xaa, 0x2c, 0x1a, 0x91, 0xf6, 0x82, 0xf8, 0x87, 0x7f, 0xba, 0xd1, 0x88, 0x6c, 0xd7, 0x08, 0xfe, 0xe1, 0x9f, 0x76, 0x34, 0x22, 0x39, 0x49, 0x06, 0xff, 0xf0, 0xcf, 0x0d, 0xd9, 0xde, 0x25, 0xd7, 0x93, 0x2d, 0xf1, 0x0f, 0xff, 0xe2, 0x44, 0x23, 0x6e, 0xbd, 0x20, 0xfe, 0x35, 0xc9, 0xbf, 0x7f, 0x77, 0x7c, 0x2f, 0xed, 0xc9, 0xdf, 0x33, 0x24, 0x8b, 0x46, 0x5c, 0x46, 0x82, 0xf8, 0xd7, 0x1c, 0xff, 0xcc, 0xf3, 0x06, 0x1e, 0xfe, 0xee, 0x7c, 0x95, 0x5e, 0x81, 0x2c, 0x2b, 0x58, 0xf4, 0xae, 0x11, 0xfc, 0x6b, 0x8e, 0x7f, 0x6f, 0x9e, 0xe9, 0xbc, 0xe7, 0xaa, 0x3d, 0xa1, 0xb7, 0x56, 0x15, 0xff, 0x9a, 0xe2, 0xdf, 0xc7, 0x9f, 0xa3, 0xda, 0x79, 0x69, 0x4f, 0x7e, 0x1d, 0xee, 0xcf, 0x61, 0xfc, 0xc3, 0xbf, 0x8c, 0x87, 0xbf, 0x35, 0xdf, 0x34, 0xd4, 0x59, 0x73, 0x8d, 0x46, 0xf0, 0x0f, 0xff, 0x8a, 0xfc, 0xcb, 0x9e, 0xc3, 0xf2, 0x68, 0xa4, 0x75, 0xec, 0xd2, 0x0b, 0xe2, 0x1f, 0xfe, 0x15, 0xfb, 0xe7, 0xf7, 0xbe, 0x3f, 0x97, 0x13, 0xb5, 0xf0, 0x0f, 0xff, 0xdc, 0xfc, 0x8b, 0x13, 0x8d, 0xe0, 0x1f, 0xfe, 0xb9, 0xfa, 0x97, 0x95, 0x5b, 0x6f, 0x75, 0xa3, 0x11, 0xfc, 0xc3, 0xbf, 0x51, 0xd9, 0x17, 0xbd, 0x68, 0x64, 0xf4, 0xf9, 0xbe, 0xf8, 0x87, 0x7f, 0xb2, 0x1e, 0x30, 0x7b, 0x0e, 0xcb, 0xdf, 0x3e, 0xde, 0x9e, 0xb0, 0x9d, 0x73, 0x5e, 0x34, 0x0b, 0x87, 0x7f, 0xcd, 0xf1, 0xaf, 0xbd, 0x1e, 0xf7, 0xed, 0xe3, 0x66, 0x34, 0x72, 0xf7, 0x6c, 0xd1, 0xba, 0x7c, 0xfc, 0x6b, 0x8e, 0x7f, 0x52, 0x03, 0x7d, 0xa2, 0x91, 0xce, 0x9a, 0x6c, 0x2d, 0x2a, 0xfe, 0x35, 0xc9, 0xbf, 0x8c, 0xd1, 0xf3, 0x20, 0xb6, 0x22, 0xcf, 0x0a, 0xca, 0xc0, 0xbf, 0xa6, 0xf9, 0xd7, 0xeb, 0xb9, 0xbc, 0xfb, 0x65, 0x50, 0x76, 0xb6, 0xf0, 0x0f, 0x34, 0xfd, 0x2b, 0x6a, 0x77, 0x8d, 0x68, 0x04, 0xff, 0xf0, 0x4f, 0x6f, 0x24, 0x38, 0x37, 0xd3, 0x6d, 0xe3, 0x1f, 0xe8, 0xae, 0x7f, 0x96, 0x8d, 0x04, 0x7d, 0x22, 0x62, 0xfc, 0xc3, 0xbf, 0xdc, 0x8c, 0x49, 0x5b, 0xf6, 0x5e, 0x4a, 0xfd, 0x68, 0x04, 0xff, 0x9a, 0xec, 0x5f, 0xc6, 0xb5, 0xa7, 0x55, 0x46, 0x23, 0xf8, 0xd7, 0x74, 0xff, 0x8a, 0xdf, 0x03, 0x38, 0x1c, 0x8d, 0xec, 0xfe, 0xc1, 0x3f, 0xfc, 0xd3, 0xdc, 0xff, 0xb6, 0xfb, 0xa7, 0xaa, 0x68, 0x04, 0xff, 0xf0, 0xaf, 0xdf, 0x07, 0xbe, 0xbc, 0x23, 0x31, 0x50, 0xbe, 0x46, 0x01, 0xff, 0xf0, 0x4f, 0x73, 0x24, 0xa8, 0x63, 0x07, 0xfe, 0xe1, 0x9f, 0xef, 0x48, 0x70, 0x6e, 0xe6, 0xcd, 0x33, 0xfc, 0xc3, 0x3f, 0xdd, 0xf3, 0x0f, 0xa4, 0x6b, 0x14, 0xc2, 0xa2, 0x11, 0xfc, 0xc3, 0xbf, 0x61, 0x64, 0x23, 0xc1, 0xb0, 0x68, 0x04, 0xff, 0xf0, 0xcf, 0xa4, 0xf3, 0x75, 0x69, 0xaf, 0x9c, 0xac, 0x20, 0xfe, 0xe1, 0x9f, 0xdc, 0x0c, 0x3d, 0x57, 0xf0, 0x0f, 0xff, 0x46, 0xf7, 0x82, 0xf1, 0xa3, 0x11, 0xfc, 0xc3, 0x3f, 0xbd, 0x9c, 0x8c, 0x3c, 0x2f, 0x88, 0x7f, 0xf8, 0xa7, 0x39, 0x12, 0x94, 0x46, 0x23, 0xf8, 0x87, 0x7f, 0x45, 0x1c, 0x4c, 0xc6, 0x5b, 0xa3, 0x80, 0x7f, 0xf8, 0xa7, 0x3f, 0x12, 0x74, 0x3f, 0x51, 0x0b, 0xff, 0xf0, 0xcf, 0xb5, 0x17, 0x94, 0x39, 0xf8, 0xf2, 0x0e, 0xfe, 0xe1, 0x9f, 0x2e, 0x32, 0x03, 0x8b, 0x57, 0x4c, 0xe7, 0xaf, 0xbb, 0xc1, 0x3f, 0xfc, 0x3b, 0xcd, 0xe1, 0xb2, 0x74, 0x8d, 0x42, 0x7e, 0x34, 0x92, 0x7f, 0x22, 0x03, 0xfe, 0x8d, 0x9b, 0x7f, 0xb3, 0x2b, 0x9d, 0xb5, 0xd8, 0x57, 0xb0, 0xb3, 0xa5, 0x95, 0x15, 0x2c, 0x5a, 0xed, 0x80, 0x7f, 0xe3, 0xe6, 0x5f, 0x76, 0xe2, 0x45, 0xfc, 0x6b, 0x38, 0x5c, 0xd6, 0x88, 0x46, 0x8a, 0x33, 0x3b, 0xf8, 0x37, 0x7e, 0xfe, 0xf5, 0xcf, 0xfc, 0xd9, 0x5f, 0x6d, 0x1d, 0xff, 0x2d, 0xf5, 0x18, 0x09, 0x66, 0xeb, 0x64, 0x0e, 0x97, 0xff, 0x96, 0x83, 0x49, 0x97, 0x3d, 0xf0, 0xf8, 0x37, 0x9e, 0xfe, 0x95, 0xd1, 0x27, 0x4a, 0x47, 0x82, 0x3e, 0x05, 0xff, 0xd2, 0xf0, 0x4f, 0xfe, 0x56, 0xc0, 0x38, 0x23, 0x41, 0xfc, 0x6b, 0xae, 0x7f, 0xbe, 0xef, 0x87, 0x2e, 0xc2, 0xfd, 0x4c, 0x41, 0xfc, 0x6b, 0xb6, 0x7f, 0xb3, 0x2b, 0x45, 0x67, 0xf1, 0xf9, 0x21, 0x3d, 0x45, 0x01, 0xff, 0x9a, 0xe9, 0x5f, 0xac, 0x1e, 0x50, 0xbe, 0x6b, 0x04, 0xff, 0xf0, 0x6f, 0x1c, 0xfa, 0x40, 0xfc, 0xc3, 0x3f, 0x77, 0x64, 0x27, 0xc9, 0xe0, 0x1f, 0xfe, 0xe9, 0x23, 0x3b, 0xd9, 0x12, 0xff, 0xf0, 0x4f, 0x7b, 0x24, 0xa8, 0xd9, 0x0b, 0xe2, 0x1f, 0xfe, 0xc9, 0x91, 0x9e, 0x6c, 0x59, 0xd5, 0xc9, 0xbf, 0x50, 0xb6, 0x7f, 0xbb, 0x97, 0xcb, 0xb9, 0x46, 0xad, 0x3e, 0x50, 0xf3, 0x9c, 0x2d, 0xd0, 0x61, 0x63, 0xc1, 0xd7, 0xbe, 0xe7, 0xbf, 0xca, 0xbc, 0x4e, 0xe9, 0xae, 0x91, 0xb2, 0xce, 0x5b, 0x85, 0x50, 0xdc, 0xdf, 0xfc, 0x1c, 0x7b, 0xfe, 0xad, 0x88, 0xb0, 0x19, 0xe2, 0xf6, 0x3a, 0x6d, 0x5d, 0x47, 0xec, 0xef, 0xb9, 0xca, 0x2f, 0xf3, 0x47, 0xed, 0x89, 0x0a, 0xae, 0x34, 0x60, 0x24, 0xe8, 0xf3, 0x16, 0x44, 0x28, 0x8f, 0xce, 0xda, 0x60, 0x85, 0x55, 0x7e, 0x89, 0xbf, 0x22, 0x35, 0x9f, 0xc1, 0xaa, 0x2b, 0xd7, 0x42, 0xcf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x99, 0x9a, 0x3e, 0x5d, 0x3a, 0x57, 0x5d, 0x3e, 0x15, 0x56, 0xe7, 0xeb, 0x57, 0xc3, 0xff, 0x2f, 0xbf, 0x94, 0x59, 0xd7, 0x8b, 0x0b, 0xdd, 0x1d, 0x9d, 0x3b, 0x99, 0x95, 0x2f, 0xdf, 0xcd, 0xcf, 0x7d, 0x78, 0xa2, 0xf7, 0x0d, 0x17, 0x4f, 0xca, 0xba, 0x8f, 0xbd, 0xde, 0x97, 0xef, 0x57, 0xce, 0xe8, 0xd7, 0x33, 0xfc, 0xb7, 0x8f, 0x3e, 0x35, 0xdb, 0xbf, 0xa9, 0xe9, 0xeb, 0xf7, 0xfd, 0x6a, 0xb2, 0xb5, 0xce, 0xeb, 0x57, 0xe6, 0xe7, 0x1e, 0x7d, 0x1a, 0xfe, 0xd4, 0x83, 0x1b, 0xe3, 0xe0, 0x5f, 0x9c, 0x7a, 0xcc, 0xbf, 0x5e, 0x3c, 0x69, 0xb6, 0x7f, 0x53, 0xd3, 0xdf, 0xf6, 0xfc, 0xfa, 0x07, 0x97, 0x6b, 0xff, 0xb6, 0x67, 0x7e, 0xc6, 0xfe, 0xcc, 0xa9, 0x97, 0x7f, 0xd7, 0xef, 0x97, 0xe5, 0x9f, 0xed, 0xef, 0x9b, 0xe5, 0x9f, 0xad, 0xd7, 0x2a, 0xa6, 0xbb, 0xe3, 0x72, 0xed, 0xdb, 0xe7, 0xb4, 0xfa, 0xdb, 0x72, 0xfd, 0x8b, 0x55, 0x8f, 0xed, 0xef, 0x3f, 0x3c, 0x69, 0xb6, 0x7f, 0xb6, 0x27, 0x80, 0x0b, 0xa6, 0x5b, 0xe6, 0xb5, 0x5f, 0x7c, 0xaf, 0xd3, 0xdb, 0xa6, 0xec, 0xdf, 0xd4, 0xf4, 0xf6, 0x39, 0xfc, 0xd3, 0x69, 0xa5, 0xe1, 0x68, 0x46, 0xf7, 0xdb, 0xa5, 0xea, 0xdf, 0xc5, 0xf7, 0xf8, 0xa7, 0xd3, 0x4a, 0xad, 0xdb, 0xf8, 0xe7, 0xf3, 0x7f, 0x4f, 0xff, 0x6e, 0xe3, 0xfb, 0xb7, 0x78, 0x32, 0xba, 0xc4, 0xad, 0x2b, 0xae, 0x7f, 0xa7, 0xff, 0x97, 0x19, 0xa3, 0xf8, 0xc7, 0xbe, 0x76, 0xff, 0xae, 0x9c, 0x89, 0x73, 0x1f, 0xed, 0xbf, 0xd3, 0xf0, 0x7a, 0x46, 0xf9, 0x77, 0x3a, 0x0f, 0x13, 0xdf, 0xbf, 0x58, 0xf9, 0xcd, 0xe2, 0xba, 0xcc, 0xbc, 0x89, 0x7f, 0x4b, 0x3d, 0xb8, 0x91, 0xff, 0x24, 0x79, 0x71, 0xa1, 0x68, 0xa4, 0x13, 0xea, 0x9f, 0x5f, 0xec, 0xe4, 0xe3, 0x49, 0xd8, 0x95, 0x17, 0xf7, 0xab, 0xff, 0xfe, 0x32, 0x53, 0xf6, 0xcf, 0x6c, 0x43, 0x7f, 0xff, 0x3a, 0x57, 0xf3, 0x6b, 0x33, 0x7b, 0xab, 0xb0, 0x6f, 0x57, 0xa5, 0x7f, 0xc3, 0x23, 0x0b, 0xfd, 0xe7, 0x3a, 0xfe, 0xc9, 0x31, 0x7b, 0xb8, 0xbc, 0xbb, 0x1d, 0xda, 0x86, 0x69, 0xfb, 0x37, 0x98, 0x3d, 0xc2, 0x3f, 0x57, 0x5a, 0xb7, 0xf3, 0x46, 0xd2, 0xda, 0xdf, 0x3a, 0x6d, 0xff, 0x06, 0xf7, 0x07, 0xff, 0xfc, 0xef, 0xe8, 0xc0, 0x08, 0x73, 0xe6, 0x17, 0xff, 0xf2, 0xfd, 0xfb, 0xfb, 0xdb, 0xc5, 0x3f, 0xff, 0x3b, 0x3a, 0x18, 0x47, 0x9b, 0x33, 0xbf, 0xe3, 0xec, 0x5f, 0xec, 0xf8, 0xa3, 0x1f, 0xbd, 0xf5, 0x0d, 0xac, 0x2e, 0xff, 0x37, 0x7e, 0xfe, 0x99, 0x33, 0xa5, 0xfd, 0xf9, 0x5d, 0x73, 0xe6, 0x37, 0xbc, 0x05, 0xdd, 0xf3, 0x7f, 0xa1, 0x5e, 0xba, 0xd6, 0x73, 0xf1, 0xbd, 0xec, 0x5b, 0xb9, 0x19, 0x80, 0x7f, 0xee, 0x98, 0x9e, 0xbd, 0xb8, 0x60, 0xcf, 0xcd, 0x84, 0xf7, 0x1e, 0xf5, 0xf3, 0x4f, 0xba, 0x9e, 0x02, 0xff, 0x34, 0xf3, 0x7f, 0x7d, 0x86, 0xe7, 0x78, 0xfb, 0x2b, 0x0c, 0xcc, 0x99, 0xdf, 0x54, 0xfd, 0xeb, 0xff, 0xde, 0xfc, 0xfe, 0xaf, 0x19, 0xbf, 0x65, 0xad, 0x91, 0x96, 0x7f, 0xf1, 0xe6, 0xdf, 0xf2, 0xe2, 0x8c, 0xa2, 0x39, 0xce, 0x74, 0xfc, 0x93, 0xdc, 0x3f, 0xf3, 0x4e, 0x99, 0xcf, 0x09, 0xd3, 0x49, 0xfc, 0xcb, 0xc3, 0x5c, 0x89, 0x95, 0x1f, 0x97, 0xe0, 0x5f, 0xfe, 0x9d, 0xd2, 0xb6, 0x22, 0x75, 0xff, 0x6c, 0x77, 0xd5, 0x9c, 0xf9, 0xf5, 0x5d, 0xe7, 0x5f, 0x8d, 0x7f, 0x92, 0xfb, 0x88, 0x7f, 0x75, 0xf3, 0xaf, 0x73, 0x75, 0x78, 0x5e, 0x24, 0x64, 0xd5, 0x69, 0x15, 0xfe, 0x49, 0x7a, 0xc0, 0x50, 0xff, 0xba, 0x3b, 0xe6, 0x58, 0x39, 0xb6, 0x7f, 0xad, 0xdb, 0xf6, 0x52, 0x85, 0x7f, 0xe1, 0xb5, 0x0e, 0x67, 0xfa, 0xcc, 0xcc, 0x5f, 0xc8, 0xaa, 0xd3, 0x3c, 0xff, 0x1e, 0x7d, 0xb2, 0xdf, 0x47, 0xff, 0x35, 0xfe, 0xff, 0x46, 0xf6, 0xb6, 0xd5, 0x2e, 0x66, 0xbe, 0x29, 0xd4, 0xbf, 0x51, 0x6b, 0xc9, 0x53, 0xc9, 0x3f, 0x17, 0x65, 0xb0, 0xc2, 0x6b, 0x2d, 0xba, 0x7f, 0x5a, 0xdf, 0xb7, 0xbc, 0xfc, 0xb3, 0xc4, 0xa1, 0x70, 0xff, 0x5c, 0xe7, 0xe5, 0xd2, 0xf3, 0x6f, 0xf1, 0x44, 0xa7, 0x67, 0xc2, 0xbf, 0x30, 0xff, 0x6c, 0xbb, 0x54, 0x53, 0x9b, 0x7f, 0x8b, 0x33, 0xa3, 0xe4, 0xe2, 0x9f, 0x46, 0xec, 0x9b, 0xb6, 0x7f, 0xf6, 0xfd, 0xac, 0x69, 0xfb, 0xa7, 0x13, 0x13, 0x14, 0xdf, 0x3d, 0xdb, 0x0e, 0x2f, 0xfc, 0x2b, 0x5e, 0xad, 0x96, 0x9a, 0x7f, 0xb6, 0xd1, 0xbb, 0x56, 0xbd, 0xf6, 0xdd, 0xc0, 0xda, 0x9e, 0xa7, 0xed, 0xdf, 0xe8, 0xe8, 0xbe, 0xdc, 0x31, 0x59, 0x3c, 0xd7, 0x63, 0xfe, 0x0e, 0xcc, 0x3c, 0xbe, 0x6e, 0xec, 0x2b, 0xcb, 0xbf, 0x94, 0xb9, 0xff, 0x48, 0xcb, 0x3f, 0xdb, 0x5e, 0x7d, 0xfc, 0x73, 0xc5, 0xb6, 0x1b, 0x58, 0xbb, 0x8e, 0xb4, 0xfd, 0x1b, 0x5d, 0x6b, 0x2a, 0xfe, 0x99, 0xb9, 0x2b, 0xc9, 0xdc, 0xb9, 0x6f, 0x9b, 0xe1, 0x9f, 0xab, 0x7f, 0x66, 0xde, 0x34, 0x2d, 0xff, 0xcc, 0x28, 0x3f, 0x74, 0x47, 0x10, 0xfe, 0x69, 0xfa, 0x37, 0xca, 0x95, 0x54, 0xfc, 0xd3, 0x3d, 0x8d, 0x6a, 0x18, 0xfb, 0x2c, 0x92, 0x66, 0x96, 0x27, 0x7d, 0xff, 0x5c, 0x4f, 0x28, 0x1a, 0x57, 0xff, 0x62, 0x8e, 0x01, 0x6d, 0x39, 0x54, 0xcd, 0x1c, 0x4f, 0x5d, 0xfd, 0xb3, 0x9d, 0x7a, 0xe8, 0xef, 0x9f, 0x2d, 0x93, 0x85, 0x7f, 0x2e, 0xd8, 0x76, 0x03, 0x6b, 0x8e, 0x2f, 0x53, 0x3c, 0x7f, 0xc3, 0x2d, 0x97, 0x9a, 0x92, 0x7f, 0xe6, 0x13, 0x58, 0x2f, 0x0b, 0x68, 0xd6, 0xae, 0x9b, 0x79, 0xab, 0x9f, 0x7f, 0xaf, 0x5f, 0x69, 0xac, 0x2b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x23, 0xff, 0x03, 0x67, 0x51, 0xfd, 0x00, 0x00, 0x58, 0x02, 0x00
+};
+const unsigned int logo_rgb565_bin_gz_len = 2247;
+
+#define MAX_SPI_BYTES 32
+
+void *logo_image_buff     = NULL;
+int logo_image_buff_alloc = 0;
+static void _lcd_start(void) {
+    unsigned int cmd_gpio;
+    gpio_lookup_name("GPIOI0", NULL, NULL, &cmd_gpio);
+    gpio_request(cmd_gpio, "cmd_gpio");
+    // reset
+    gpio_direction_output(cmd_gpio, 1);
+    mdelay(20);
+    gpio_direction_output(cmd_gpio, 0);
+    mdelay(20);
+    gpio_direction_output(cmd_gpio, 1);
+
+    /*  Power control B (CFh)  */
+
+    Lcd_WriteIndex(0xCF);
+    LCD_WriteData(0x00);
+    LCD_WriteData(0x83);
+    LCD_WriteData(0x30);
+
+    /*  Power on sequence control (EDh) */
+
+    Lcd_WriteIndex(0xED);
+    LCD_WriteData(0x64);
+    LCD_WriteData(0x03);
+    LCD_WriteData(0x12);
+    LCD_WriteData(0x81);
+
+    /*  Driver timing control A (E8h) */
+
+    Lcd_WriteIndex(0xE8);
+    LCD_WriteData(0x85);
+    LCD_WriteData(0x01);
+    LCD_WriteData(0x79);
+
+    /*  Power control A (CBh) */
+
+    Lcd_WriteIndex(0xCB);
+    LCD_WriteData(0x39);
+    LCD_WriteData(0x2C);
+    LCD_WriteData(0x00);
+    LCD_WriteData(0x34);
+    LCD_WriteData(0x02);
+
+    /* Pump ratio control (F7h) */
+
+    Lcd_WriteIndex(0xF7);
+    LCD_WriteData(0x20);
+
+    /* Driver timing control B */
+
+    Lcd_WriteIndex(0xEA);
+    LCD_WriteData(0x00);
+    LCD_WriteData(0x00);
+
+    /* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
+
+    Lcd_WriteIndex(0xB1);
+    LCD_WriteData(0x00);
+    LCD_WriteData(0x1B);
+
+    /*  Display Function Control (B6h) */
+    Lcd_WriteIndex(0xB7);
+    LCD_WriteData(0x07);
+
+    Lcd_WriteIndex(0xB6);
+    LCD_WriteData(0x0A);
+    LCD_WriteData(0x82);
+    LCD_WriteData(0x27);
+    LCD_WriteData(0x00);
+
+    /* Power Control 1 (C0h) */
+
+    Lcd_WriteIndex(0xC0);
+    LCD_WriteData(0x26);
+
+    /* Power Control 2 (C1h) */
+
+    Lcd_WriteIndex(0xC1);
+    LCD_WriteData(0x11);
+
+    /* VCOM Control 1(C5h) */
+    Lcd_WriteIndex(0xC5);
+    LCD_WriteData(0x35);
+    LCD_WriteData(0x3E);
+
+    /*  VCOM Control 2(C7h)  */
+    Lcd_WriteIndex(0xC7);
+    LCD_WriteData(0xBE);
+
+    // /* Enable 3G (F2h) */
+    // Lcd_WriteIndex(0xF2);
+    // LCD_WriteData(0x00);
+
+    /* Gamma Set (26h) */
+    Lcd_WriteIndex(0x26);
+    LCD_WriteData(0x01);
+
+    /* Positive Gamma Correction */
+    Lcd_WriteIndex(0xE0);  // Set Gamma
+    LCD_WriteData(0x0F);
+    LCD_WriteData(0x26);
+    LCD_WriteData(0x24);
+    LCD_WriteData(0x0B);
+    LCD_WriteData(0x0E);
+    LCD_WriteData(0x09);
+    LCD_WriteData(0x54);
+    LCD_WriteData(0xA8);
+    LCD_WriteData(0x46);
+    LCD_WriteData(0x0C);
+    LCD_WriteData(0x17);
+    LCD_WriteData(0x09);
+    LCD_WriteData(0x0F);
+    LCD_WriteData(0x07);
+    LCD_WriteData(0x00);
+
+    /* Negative Gamma Correction (E1h) */
+    Lcd_WriteIndex(0XE1);  // Set Gamma
+    LCD_WriteData(0x00);
+    LCD_WriteData(0x19);
+    LCD_WriteData(0x1B);
+    LCD_WriteData(0x04);
+    LCD_WriteData(0x10);
+    LCD_WriteData(0x07);
+    LCD_WriteData(0x2A);
+    LCD_WriteData(0x47);
+    LCD_WriteData(0x39);
+    LCD_WriteData(0x03);
+    LCD_WriteData(0x06);
+    LCD_WriteData(0x06);
+    LCD_WriteData(0x30);
+    LCD_WriteData(0x38);
+    LCD_WriteData(0x0F);
+
+    /* memory access control set */
+
+    Lcd_WriteIndex(0x36);
+    LCD_WriteData(0x08);
+
+    /*inv*/
+    Lcd_WriteIndex(0x21);
+
+    /*  Pixel Format Set (3Ah)  */
+
+    Lcd_WriteIndex(0x3a);
+    LCD_WriteData(0x55);
+
+    /* Sleep Out (11h)  */
+    Lcd_WriteIndex(0x11);
+    mdelay(100);
+
+    /* Display ON (29h) */
+    Lcd_WriteIndex(0x29);
+
+    uint16_t x      = 0;
+    uint16_t y      = 0;
+    uint16_t width  = 320;
+    uint16_t height = 240;
+    Lcd_WriteIndex(0x2A);
+    LCD_WriteData(x >> 8);
+    LCD_WriteData(x & 0xff);
+    LCD_WriteData((x + width - 1) >> 8);
+    LCD_WriteData((x + width - 1) & 0xff);
+
+    Lcd_WriteIndex(0x2B);
+    LCD_WriteData(y >> 8);
+    LCD_WriteData(y & 0xff);
+    LCD_WriteData((y + height - 1) >> 8);
+    LCD_WriteData((y + height - 1) & 0xff);
+
+    Lcd_WriteIndex(0x2C);
+    gpio_direction_output(logo_bus.gpio_num, 1);
+
+    spi_xfer(logo_bus.spi_slave, 320 * 240 * 4, logo_image_buff, NULL,
+             SPI_XFER_BEGIN | SPI_XFER_END);
+    spi_xfer(logo_bus.spi_slave, 320 * 240 * 4, logo_image_buff + 320 * 120,
+             NULL, SPI_XFER_BEGIN | SPI_XFER_END);
+    spi_xfer(logo_bus.spi_slave, 320 * 240 * 4, logo_image_buff + 320 * 240,
+             NULL, SPI_XFER_BEGIN | SPI_XFER_END);
+    spi_xfer(logo_bus.spi_slave, 320 * 240 * 4, logo_image_buff + 320 * 120 * 3,
+             NULL, SPI_XFER_BEGIN | SPI_XFER_END);
+    gpio_free(cmd_gpio);
+}
+
+static void _turn_backlight_on(void) {
+    unsigned char byte;
+    unsigned char linebuf;
+    dm_i2c_read(logo_bus.i2c_dev, 0x90, &linebuf, 1);
+
+    byte = 0x1c;
+    dm_i2c_write(logo_bus.i2c_dev, 0x99, &byte, 1);
+    linebuf = linebuf | 0x80;
+    dm_i2c_write(logo_bus.i2c_dev, 0x90, &linebuf, 1);
+}
+
+int custom_show_logo(struct cmd_tbl *cmdtp, int flag, int argc,
+                     char *const argv[]) {
+    logo_apply_bus();
+
+    {
+        const char *load_logo_from_fs_cmd =
+            "ext4load mmc 0:5 ${kernel_addr_r} "
+            "/boot/logo_lcd_320_240_rgb565.bmp";
+        int result = run_command(load_logo_from_fs_cmd, 0);
+        if (result == 0) {
+            const char *env_var_name = "kernel_addr_r";
+            char *env_var_value      = NULL;
+
+            env_var_value = env_get(env_var_name);
+
+            if (env_var_value) {
+                unsigned long bmp_addr_r =
+                    simple_strtoul(env_var_value, NULL, 16);
+
+                struct bmp_image *bmp =
+                    (struct bmp_image *)map_sysmem(bmp_addr_r, 0);
+
+                if (bmp != NULL) {
+                    if ((le16_to_cpu(bmp->header.bit_count) == 16) &&
+                        (le32_to_cpu(bmp->header.width) == 320) &&
+                        (le32_to_cpu(bmp->header.height) == 240)) {
+                        logo_image_buff =
+                            (void *)(le32_to_cpu(bmp->header.data_offset) +
+                                     bmp_addr_r);
+                        uint16_t *pixel = (uint16_t *)logo_image_buff;
+                        for (int i = 0; i < 320 * 240; i++) {
+                            *pixel = __builtin_bswap16(*pixel);
+                            pixel++;
+                        }
+                    }
+                }
+            }
+        }
+        if (logo_image_buff == NULL) {
+            logo_image_buff       = malloc(320 * 240 * 2);
+            logo_image_buff_alloc = 1;
+            unsigned long lenp    = logo_rgb565_bin_gz_len;
+            gunzip(logo_image_buff, 320 * 240 * 2,
+                   (unsigned char *)logo_rgb565_bin_gz, &lenp);
+        }
+    }
+
+    _lcd_start();
+    if (logo_image_buff_alloc) free(logo_image_buff);
+
+    _turn_backlight_on();
+    logo_release_bus();
+    return CMD_RET_SUCCESS;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(show_logo, 1, 1, custom_show_logo, "Show logo on lcd!", "show logo");
